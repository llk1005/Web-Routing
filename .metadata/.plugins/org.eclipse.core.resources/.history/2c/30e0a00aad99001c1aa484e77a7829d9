package edu.sru.thangiah.webrouting.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import edu.sru.thangiah.webrouting.domain.Driver;
import edu.sru.thangiah.webrouting.domain.Locations;
import edu.sru.thangiah.webrouting.domain.Vehicles;
import edu.sru.thangiah.webrouting.repository.ContactsRepository;
import edu.sru.thangiah.webrouting.repository.ContractorsRepository;
import edu.sru.thangiah.webrouting.repository.DriverRepository;

@Controller
public class DriverController {

	private DriverRepository driverRepository;
	
	private ContractorsRepository contractorsRepository;
	
	private ContactsRepository contactRepository;
	
	public DriverController (DriverRepository driverRepository, ContactsRepository contactRepository, ContractorsRepository contractorsRepository) {
		this.driverRepository = driverRepository;
		this.contractorsRepository = contractorsRepository;
		this.contactRepository = contactRepository;
	}
	
	@RequestMapping({"/drivers"})
    public String showDriversList(Model model) {
		model.addAttribute("drivers", driverRepository.findAll());
        return "drivers";
    }
	
	@GetMapping({"/add-driver"})
    public String showLists(Model model, Driver drivers, BindingResult result) {
		model.addAttribute("contractors", contractorsRepository.findAll());
		model.addAttribute("contacts", contactRepository.findAll());
        return "/add/add-driver";
    }
	
	@RequestMapping({"/adddriver"})
  	public String addDriver(@Validated Driver drivers, BindingResult result, Model model) {
  		if (result.hasErrors()) {
  			return "/add/add-driver";
		}
  		
  		driverRepository.save(drivers);
  		return "redirect:/drivers";
  	}
	
	@GetMapping("/deletedriver/{id}")
    public String deleteDriver(@PathVariable("id") long id, Model model) {
        Driver drivers = driverRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid driver Id:" + id));
        driverRepository.delete(drivers);
        return "redirect:/drivers";
    }
	
	@GetMapping("/editdriver/{id}")
    public String showEditForm(@PathVariable("id") long id, Model model) {
		Driver drivers = driverRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid Driver Id:" + id));
        
		 model.addAttribute("contractors", contractorsRepository.findAll());
		 model.addAttribute("contacts", contactRepository.findAll());  
	     model.addAttribute("driver", drivers);
	     
        return "/update/update-driver";
    }
	
	@PostMapping("/updatedriver/{id}")
    public String updateDriver(@PathVariable("id") long id, @Validated Driver driver, 
      BindingResult result, Model model) {
        if (result.hasErrors()) {
        	driver.setId(id);
            return "/update/update-driver";
        }
            
        driverRepository.save(driver);
        return "redirect:/drivers";
    }
}
