package edu.sru.thangiah.webrouting.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import edu.sru.thangiah.webrouting.domain.Contractors;
import edu.sru.thangiah.webrouting.domain.Locations;
import edu.sru.thangiah.webrouting.repository.ContractorsRepository;
import edu.sru.thangiah.webrouting.repository.LocationsRepository;

/*
 * LocationsController
 * 
 * Created 2/1/2022 by Logan Kirkwood
 * 
 * Description: Handles the Thymeleaf controls for pages
 * dealing with Locations
 */

@Controller
public class LocationsController {
	
	private LocationsRepository locationsRepository;
	
	private ContractorsRepository contractorsRepository;
	
	public LocationsController (LocationsRepository locationsRepository, ContractorsRepository contractorsRepository) {
		this.locationsRepository = locationsRepository;
		this.contractorsRepository = contractorsRepository;
	}
	
	@RequestMapping({"/locations"})
    public String showLocationsList(Model model) {
        model.addAttribute("locations", locationsRepository.findAll());
        return "locations";
    }
	
	@GetMapping({"/add-location"})
    public String showContractorList(Model model, Locations location, BindingResult result) {
        model.addAttribute("contractors", contractorsRepository.findAll());       
        return "/add/add-location";
    }
	
	@RequestMapping({"/addlocations"})
  	public String addLocation(@Validated Locations location, BindingResult result, Model model) {
  		if (result.hasErrors()) {
  			return "/add/add-location";
		}
  		
  		locationsRepository.save(location);
  		return "redirect:/locations";
  	}
	
	@GetMapping("/deletelocations/{id}")
    public String deleteLocation(@PathVariable("id") long id, Model model) {
        Locations location = locationsRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid location Id:" + id));
        locationsRepository.delete(location);
        return "redirect:/locations";
    }
	
	@GetMapping("/editlocations/{id}")
    public String showEditForm(@PathVariable("id") long id, Model model) {
		Locations location = locationsRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid Location Id:" + id));
        
		model.addAttribute("contractors", contractorsRepository.findAll());
        model.addAttribute("locations", location);
        return "/update/update-location";
    }
	
	@PostMapping("/updatelocation/{id}")
    public String updateLocation(@PathVariable("id") long id, @Validated Locations location, 
      BindingResult result, Model model) {
        if (result.hasErrors()) {
        	location.setId(id);
            return "/update/update-location";
        }
            
        locationsRepository.save(location);
        return "redirect:/locations";
    }

}
