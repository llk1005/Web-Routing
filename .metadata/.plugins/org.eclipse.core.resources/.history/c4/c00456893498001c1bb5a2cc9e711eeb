package edu.sru.thangiah.webrouting.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;


import edu.sru.thangiah.webrouting.domain.Shipments;
import edu.sru.thangiah.webrouting.domain.Vehicles;
import edu.sru.thangiah.webrouting.repository.LocationsRepository;
import edu.sru.thangiah.webrouting.repository.RoutesRepository;
import edu.sru.thangiah.webrouting.repository.ShipmentsRepository;
import edu.sru.thangiah.webrouting.repository.VehicleTypesRepository;

@Controller
public class ShipmentsController {

	private ShipmentsRepository shipmentsRepository;

	private RoutesRepository routesRepository;
	
	private VehicleTypesRepository vehicletypesRepository;
	
	private LocationsRepository locationsRepository;


	public ShipmentsController (ShipmentsRepository shipmentsRepository, RoutesRepository routesRepository, VehicleTypesRepository vehicletypesRepository, LocationsRepository locationsRepository) {
		this.locationsRepository = locationsRepository;
		this.routesRepository = routesRepository;
		this.vehicletypesRepository = vehicletypesRepository;
		this.shipmentsRepository = shipmentsRepository;
	}

	@RequestMapping({"/shipments"})
    	public String showShipmentList(Model model) {
        model.addAttribute("shipments", shipmentsRepository.findAll());
        return "shipments";
    }

	@GetMapping({"/add-shipments"})
    	public String showList(Model model, Shipments shipment, BindingResult result) {
        model.addAttribute("locations", locationsRepository.findAll());
        model.addAttribute("vehicletypes", vehicletypesRepository.findAll());
        model.addAttribute("routes", routesRepository.findAll());       
        return "add-shipments";
    }

	@RequestMapping({"/addshipments"})
  	public String addShipment(@Validated Shipments shipment, BindingResult result, Model model) {
  		if (result.hasErrors()) {
  			return "add-shipments";
		}
  		
  		shipmentsRepository.save(shipment);
  		return "redirect:/shipments";
  	}

	@GetMapping("/deleteshipment/{id}")
    	public String deleteShipment(@PathVariable("id") long id, Model model) {
        Shipments shipment = shipmentsRepository.findById(id)
        .orElseThrow(() -> new IllegalArgumentException("Invalid shipment Id:" + id));
        shipmentsRepository.delete(shipment);
        return "redirect:/shipments";
    }
	@GetMapping("/editshipment/{id}")
    public String showEditForm(@PathVariable("id") long id, Model model) {
		Shipments shipment = shipmentsRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid Shipment Id:" + id));
        
		 model.addAttribute("locations", locationsRepository.findAll());
	     model.addAttribute("vehicletypes", vehicletypesRepository.findAll());
	     model.addAttribute("routes", routesRepository.findAll());   
	     model.addAttribute("shipments", shipment);
	     
        return "add-shipments";
    }
	
	

}

