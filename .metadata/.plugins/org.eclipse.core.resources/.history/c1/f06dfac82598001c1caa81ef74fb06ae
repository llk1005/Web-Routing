package edu.sru.thangiah.webrouting.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import edu.sru.thangiah.webrouting.domain.Locations;
import edu.sru.thangiah.webrouting.domain.Vehicles;
import edu.sru.thangiah.webrouting.repository.ContractorsRepository;
import edu.sru.thangiah.webrouting.repository.LocationsRepository;
import edu.sru.thangiah.webrouting.repository.VehicleTypesRepository;
import edu.sru.thangiah.webrouting.repository.VehiclesRepository;

/*
 * VehiclesController
 * 
 * Created 2/1/2022 by Logan Kirkwood
 * 
 * Description: Handles the Thymeleaf controls for pages
 * dealing with Vehicles
 */

@Controller
public class VehiclesController {
	
	private VehiclesRepository vehiclesRepository;
	
	private LocationsRepository locationsRepository;
	
	private VehicleTypesRepository vehicleTypesRepository;
	
	private ContractorsRepository contractorsRepository;
	
	public VehiclesController(VehiclesRepository vehiclesRepository, LocationsRepository locationsRepository, VehicleTypesRepository vehicleTypesRepository, ContractorsRepository contractorsRepository) {
		this.vehiclesRepository = vehiclesRepository;
		this.locationsRepository = locationsRepository;
		this.vehicleTypesRepository = vehicleTypesRepository;
		this.contractorsRepository = contractorsRepository;
	}
	
	@RequestMapping({"/vehicles"})
    public String showVehicleList(Model model) {
        model.addAttribute("vehicles", vehiclesRepository.findAll());
        return "vehicles";
    }
	
	@GetMapping({"/add-vehicle"})
    public String showLists(Model model, Vehicles vehicles, BindingResult result) {
        model.addAttribute("vehicleTypes", vehicleTypesRepository.findAll()); 
        model.addAttribute("locations", locationsRepository.findAll());   
        model.addAttribute("contractors", contractorsRepository.findAll());   
        return "add-vehicle";
    }
	
	@RequestMapping({"/addvehicles"})
  	public String addVehicle(@Validated Vehicles vehicles, BindingResult result, Model model) {
  		if (result.hasErrors()) {
  			return "add-vehicle";
		}
  		
  		vehiclesRepository.save(vehicles);
  		return "redirect:/vehicles";
  	}
	
	@GetMapping("/deletevehicles/{id}")
    public String deleteVehicle(@PathVariable("id") long id, Model model) {
        Vehicles vehicle = vehiclesRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid vehicle Id:" + id));
        vehiclesRepository.delete(vehicle);
        return "redirect:/vehicles";
    }
	
	@GetMapping("/editvehicles/{id}")
    public String showEditForm(@PathVariable("id") long id, Model model) {
		 Vehicles vehicle = vehiclesRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid Vehicle Id:" + id));
        
		 model.addAttribute("vehicleTypes", vehicleTypesRepository.findAll()); 
	     model.addAttribute("locations", locationsRepository.findAll());   
	     model.addAttribute("contractors", contractorsRepository.findAll());   
	     model.addAttribute("vehicles", vehicle);
	     
        return "add-vehicle";
    }

}
