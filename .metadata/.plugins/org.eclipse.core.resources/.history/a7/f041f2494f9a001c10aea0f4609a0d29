package edu.sru.thangiah.webrouting.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import edu.sru.thangiah.webrouting.domain.Routes;
import edu.sru.thangiah.webrouting.domain.User;
import edu.sru.thangiah.webrouting.repository.RoleRepository;
import edu.sru.thangiah.webrouting.repository.UserRepository;
import edu.sru.thangiah.webrouting.services.UserService;
import edu.sru.thangiah.webrouting.web.UserValidator;

/*
 * UserController
 * 
 * Created 1/30/2022 by Logan Kirkwood
 * 
 * Description: Handles the Thymeleaf controls for pages
 * dealing with Users
 */

@Controller
public class UserController {
	
	@Autowired
    private UserService userService;
	
	private UserRepository userRepository;
	
	private RoleRepository roleRepository;
	
	@Autowired
    private UserValidator userValidator;
    
    public UserController(UserRepository userRepository, RoleRepository roleRepository) {
		this.userRepository = userRepository;
		this.roleRepository = roleRepository;
	}
    
    @RequestMapping({"/users"})
    public String showUserList(Model model) {
        model.addAttribute("userstable", userRepository.findAll());
        return "users";
    }
    

  	@RequestMapping({"/signup"})
      public String showSignUpForm(User user, Model model) {
  		model.addAttribute("roles", roleRepository.findAll());
  		return "add-user";
    }
      
  	@RequestMapping({"/adduser"})
  	public String addUser(@Validated User user, BindingResult result, Model model) {
  		userValidator.validate(user, result);
  		if (result.hasErrors()) {
  			return "add-user";
		}
  		
  		userService.save(user);
  		return "redirect:/users";
  	}
  	
  	@GetMapping("/deleteuser/{id}")
    public String deleteUser(@PathVariable("id") long id, Model model) {
        User user = userRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
        userRepository.delete(user);
        return "redirect:/users";
    }
  	
  	@GetMapping("/edituser/{id}")
    public String showEditForm(@PathVariable("id") long id, Model model) {
  		User user = userRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
        
        model.addAttribute("user", user);
        return "update-user";
    }
  	
  	@PostMapping("/updateuser/{id}")
    public String updateUser(@PathVariable("id") long id, @Validated User user, 
      BindingResult result, Model model) {
        if (result.hasErrors()) {
        	user.setId(id);
            return "/update/update-routes";
        }
            
        userService.save(user);
        return "redirect:/users";
    }
    
}
